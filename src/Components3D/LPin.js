/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo } from 'react'
import { useFrame } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { useSpring } from '@react-spring/core'
import { a } from '@react-spring/three'

const easeInOutCubic = (t) => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1)

export default function LPin({ position = [-55, 50, -46], ...props }) {
  const group = useRef()
  // const ref = useRef()
  const { nodes, materials } = useGLTF('/LPin.glb')

  // const position = [-55, 50, -46]

  // const factor = useMemo(() => 0.5 + Math.random(), [])
  // useFrame((state) => {
  //   const t = easeInOutCubic((1 + Math.sin(state.clock.getElapsedTime() * factor)) / 2)
  //   ref.current.position.y = position[1] + t * 4
  //   // ref.current.scale.y = 1 + t * 3
  // })

  const [spring, set] = useSpring(() => ({
    position: [...position],
    config: { 
      mass: 10, 
      friction: 70, 
      tension: 400
    },
  }))

      useEffect(() => {
        set({ 
          position: [-55, 10, -46],
        })
      })
  return (
    <a.group
      // position={position}
      // ref={ref}
    >
      <a.group 
        ref={group} 
        {...props} 
        dispose={null} 
        scale={[3, 3, 3]} 
        // position={[-55, 10, -46]}
        {...spring} 
        >
        <mesh geometry={nodes.Sphere.geometry} material={materials['Material.001']} position={[0, 3.14, 0]} />
        <mesh
          geometry={nodes.Cylinder.geometry}
          material={materials['Material.002']}
          position={[0, -1.41, 0]}
          scale={1.53}
        />
      </a.group>
    </a.group>
  )
}

useGLTF.preload('/LPin.glb')
